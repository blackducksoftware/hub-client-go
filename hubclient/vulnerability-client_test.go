// Copyright 2018 Synopsys, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package hubclient

import (
	"testing"

	"github.com/blackducksoftware/hub-client-go/hubapi"
	"github.com/stretchr/testify/assert"
)

func TestClient_GetVulnerability(t *testing.T) {
	apiVulnerabilities := "/api/vulnerabilities"
	client := createTestClient(t)
	assert.NotNil(t, client, "unable to get client")

	url := client.baseURL + apiVulnerabilities + "/CVE-2014-0114"
	vulnerability, err := client.GetVulnerability(hubapi.ResourceLink{
		Href: url,
	})
	assert.NoError(t, err)

	assert.Equal(t, "NVD", vulnerability.Source)
	assert.Equal(t, "CVE-2014-0114", vulnerability.Name)
	assert.Empty(t, vulnerability.Title)
	assert.NotEmpty(t, vulnerability.Description)
	assert.Empty(t, vulnerability.TechnicalDescription)
	assert.NotEmpty(t, vulnerability.PublishedDate)
	assert.NotEmpty(t, vulnerability.UpdatedDate)
	assert.Empty(t, vulnerability.DisclosureDate)
	assert.Empty(t, vulnerability.Solution)
	assert.NotEmpty(t, vulnerability.Severity)
	assert.Equal(t, false, vulnerability.UseCVSS3)

	cvss2 := vulnerability.CVSS2
	assert.NotNil(t, cvss2)
	assert.NotEqual(t, float32(0), cvss2.BaseScore)
	assert.NotEqual(t, float32(0), cvss2.ImpactSubscore)
	assert.NotEqual(t, float32(0), cvss2.ExploitabilitySubscore)
	assert.NotEmpty(t, cvss2.AccessVector)
	assert.NotEmpty(t, cvss2.AccessComplexity)
	assert.NotEmpty(t, cvss2.Authentication)
	assert.NotEmpty(t, cvss2.ConfidentialityImpact)
	assert.NotEmpty(t, cvss2.IntegrityImpact)
	assert.NotEmpty(t, cvss2.AvailabilityImpact)
	assert.NotEmpty(t, cvss2.Vector)
	cvss2Metrics := cvss2.TemporalMetrics
	assert.NotNil(t, cvss2Metrics)
	assert.Empty(t, cvss2Metrics.Exploitability)
	assert.Empty(t, cvss2Metrics.RemediationLevel)
	assert.Empty(t, cvss2Metrics.ReportConfidence)
	assert.NotEqual(t, 0, cvss2Metrics.Score)

	cvss3 := vulnerability.CVSS3
	assert.NotNil(t, cvss3)
	assert.Equal(t, float32(0), cvss3.BaseScore)
	assert.Equal(t, float32(0), cvss3.ImpactSubscore)
	assert.Equal(t, float32(0), cvss3.ExploitabilitySubscore)
	assert.Empty(t, cvss3.AccessVector)
	assert.Empty(t, cvss3.AccessComplexity)
	assert.Empty(t, cvss3.Authentication)
	assert.Empty(t, cvss3.ConfidentialityImpact)
	assert.Empty(t, cvss3.IntegrityImpact)
	assert.Empty(t, cvss3.AvailabilityImpact)
	assert.Empty(t, cvss3.PrivilegesRequired)
	assert.Empty(t, cvss3.Scope)
	assert.Empty(t, cvss3.UserInteraction)
	assert.Empty(t, cvss3.Vector)
	cvss3Metrics := cvss3.TemporalMetrics
	assert.NotNil(t, cvss3Metrics)
	assert.Empty(t, cvss3Metrics.Exploitability)
	assert.Empty(t, cvss3Metrics.RemediationLevel)
	assert.Empty(t, cvss3Metrics.ReportConfidence)
	assert.NotEqual(t, 0, cvss3Metrics.Score)

	meta := vulnerability.Meta
	assert.NotNil(t, meta)
	link, err := meta.FindLinkByRel("cwes")
	assert.NoError(t, err)
	assert.NotEmpty(t, link.Href)
	assert.Equal(t, "cwes", link.Rel)

	links, err := meta.GetLinksByRel("cwes")
	assert.Len(t, links, 1)
	assert.Equal(t, "cwes", links[0].Rel)

	links, err = meta.GetLinksByRel("reference")
	assert.True(t, len(links) > 2)
}
